{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Terracotta","text":"<p>WIP</p> <p>These docs are very work in progress! If you have any questions about Terracotta not answered by this incomplete documentation, ask in the Discord server.</p> <p>DiamondFire is a Minecraft server where you can make your own minigames using block code.</p> <p>I do not like block code.</p> <p>Terracotta is a text-based programming language that compiles to DiamondFire templates with the goal of actually making plot development easier. Unlike previous text-to-df languages, Terracotta makes no compromises when it comes to functionality or convenience. Everything you can do with DiamondFire blocks is just as easy or easier in Terracotta.</p> <p>To get started, visit Installation Guide then Plot Setup.</p>"},{"location":"#why-terracotta-is-awesome","title":"Why Terracotta is awesome","text":"<ul> <li> <p>Expressions. Almost anywhere you can put a value in Terracotta, you can write an expression. You never have to think about %math again!</p> </li> <li> <p>Automatic codeline splitting. Codelines that are too long for your plot will be automatically split into  multiple functions.</p> </li> <li> <p>Intellisense/autocomplete support. Remembering specific names of actions sucks, so you can get autocomplete to do it for you. Also supports completion of variable names, function names, action tags, potion effect ids, etc.</p> </li> <li> <p>Item libraries. Items can be edited right in your Minecraft client then easily referenced in code. In-lined NBT is in fact a war crime.</p> </li> <li> <p>Human-compatable syntax. Terracotta looks and feels like an actual programming language, not like bytecode.</p> </li> <li> <p>Automated template placement. Going from Terracotta code to a playable plot is as easy as pressing <code>f5</code>. (thanks CodeClient!)</p> </li> </ul> <p>And of course, being a text based programming language, you get all sorts of nice things you don't get through normal DiamondFire like comments, copy+paste, improved readability, etc.</p>"},{"location":"dingus/","title":"Dignus","text":""},{"location":"dingus/#oh-great-heavens","title":"oh great heavens","text":""},{"location":"test/","title":"Test","text":""},{"location":"test/#dingus","title":"dingus","text":"<p>yes</p>"},{"location":"test/#dongus","title":"dongus","text":"<p>YERS</p>"},{"location":"codeblocks/action/","title":"Action","text":""},{"location":"codeblocks/action/#syntax","title":"Syntax","text":"<p>Action syntax is as follows: <pre><code>target:Action(arguments){tags};\n</code></pre></p>"},{"location":"codeblocks/action/#arguments","title":"Arguments","text":"<p>Arguments are values seperated by commas. <pre><code>default:SendMessage(\"Hello\",\"world!\");\n</code></pre></p>"},{"location":"codeblocks/action/#tags","title":"Tags","text":"<p>Tag syntax can be thought of as a dictionary: <pre><code>default:SendMessage(\"Tags!\"){\"Alignment Mode\" = \"Centered\", \"Inherit Styles\" = \"True\"};\n</code></pre> To use a variable as the tag value, a default must be provided immediately after: <pre><code>default:SendMessage(\"Tags!\"){\"Alignment Mode\" = global messageMode ? \"Centered\"};\n</code></pre> If you are using the VSCode extension, you can use the autocomplete shortcut (<code>ctrl+space</code> by default) to quickly insert tag names and values.</p> <p>Arguments and tags are both optional and can be left out, making all of these valid action calls: <pre><code>default:StopSounds(snd(\"Pling\"));\ndefault:StopSounds{\"Sound Source\" = \"Jukebox/Note Blocks\"};\ndefault:StopSounds;\n</code></pre></p>"},{"location":"codeblocks/action/#player-actions","title":"Player Actions","text":"<p>Player actions use the following targets:</p> <ul> <li><code>default</code></li> <li><code>killer</code></li> <li><code>damager</code></li> <li><code>shooter</code></li> <li><code>victim</code></li> <li><code>allPlayers</code></li> <li><code>selected</code></li> </ul> All player action names DiamondFire Sign Name Terracotta Name ActionBar SendActionBar AddInvRow AddInventoryMenuRow AdventureMode SetToAdventureMode AttackAnimation SendAttackAnimation BlockDisguise DisguiseAsBlock BoostElytra BoostElytra ChatStyle SetChatStyle ClearDispBlock ClearDisplayBlock ClearInv ClearInventory ClearItems ClearItems ClearPotions ClearPotionEffects ClearScoreboard ClearScoreboard CloseInv CloseInventory CombatAttribute SetCombatAttribute CreativeMode SetToCreativeMode Damage Damage DisableBlocks DisableBlockModification DispHeadTexture DisplayHeadTexture DisplayBellRing DisplayBellRing DisplayBlock DisplayBlock DisplayBlockOpen DisplayBlockOpenedState DisplayEquipment DisplayEquipmentChange DisplayFracture DisplayBlockFracture DisplayGateway DisplayGatewayBeam DisplayHologram DisplayHologram DisplayLightning DisplayLightningBolt DisplayPickup DisplayPickUpAnimation DisplaySignText DisplaySignText EnableBlocks EnableBlockModification ExpandInv ExpandInventoryMenu FaceLocation FaceLocation FallingAttribute SetFallingAttribute ForceFlight ForceFlightMode GetItemCooldown GetItemCooldown GiveExhaustion GiveExhaustion GiveExp GiveExperience GiveFood GiveFood GiveItems GiveItems GivePotion GivePotionEffect GiveSaturation GiveSaturation Heal Heal HealthAttribute SetHealthAttribute HurtAnimation SendHurtAnimation InstantRespawn SetInstantRespawn KBAttribute SetKnockbackAttribute Kick Kick LaunchFwd LaunchForward LaunchProj LaunchProjectile LaunchToward LaunchTowardLocation LaunchUp LaunchUp LoadInv LoadSavedInventory MiscAttribute SetMiscellaneousAttribute MobDisguise DisguiseAsMob MovementAttribute SetMovementAttribute OpenBlockInv OpenContainerInventory OpenBook OpenBook Particle DisplayParticleEffect ParticleCircle DisplayParticleCircle ParticleCircleA DisplayAnimatedParticleCircle ParticleCuboid DisplayParticleCuboid ParticleCuboidA DisplayAnimatedParticleCuboid ParticleLine DisplayParticleLine ParticleLineA DisplayAnimatedParticleLine ParticleRay DisplayParticleRay ParticleSphere DisplayParticleSphere ParticleSpiral DisplayParticleSpiral ParticleSpiralA DisplayAnimatedParticleSpiral PlayEntitySound PlaySoundFromEntity PlaySound PlaySound PlaySoundSeq PlaySoundSequence PlayerDisguise DisguiseAsPlayer RemoveBossBar RemoveBossBar RemoveInvRow RemoveInventoryMenuRow RemoveItems RemoveItems RemovePotion RemovePotionEffect RemoveScore RemoveScoreboardScore ReplaceItems ReplaceItems ResourcePack SendResourcePack RideEntity RideEntity RmWorldBorder RemoveWorldBorder RngTeleport RandomizedTeleport RollbackBlocks RollBackBlockChanges SaveInv SaveCurrentInventory ScoreDefFormat SetScoreboardDefaultNumberFormat ScoreLineFormat SetScoreboardLineNumberFormat SendAdvancement SendAdvancement SendMessage SendMessage SendMessageSeq SendMessageSequence SendTitle SendTitle SendToPlot SendToPlot SetAbsorption SetAbsorptionHealth SetAirTicks SetRemainingAir SetAllowFlight SetAllowFlight SetAllowPVP SetPvPAllowed SetArmor SetArmorItems SetArrowsStuck SetArrowsStuck SetBossBar SetBossBar SetChatTag SetChatTag SetCollidable SetCollidable SetCompass SetCompassTarget SetCursorItem SetCursorItem SetDisguiseVisible SetOwnDisguiseVisibility SetDropsEnabled SetDeathDropsEnabled SetEntityHidden SetEntityHidden SetEquipment SetEquipmentItem SetExhaustion SetExhaustionLevel SetExp SetExperience SetFallDistance SetFallDistance SetFireTicks SetFireTicks SetFlying SetFlying SetFogDistance SetFogDistance SetFoodLevel SetFoodLevel SetFreezeTicks SetFreezeTicks SetGliding SetGliding SetHandCrafting SetAllowHandCrafting SetHealth SetCurrentHealth SetHotbar SetHotbarItems SetInvName SetInventoryMenuName SetInventory SetInventoryItems SetInventoryKept SetInventoryKept SetInvulTicks SetInvulnerabilityTicks SetItemCooldown SetItemCooldown SetMaxHealth SetMaximumHealth SetMenuItem SetInventoryMenuItem SetNameColor SetNameColor SetNamePrefix SetNameAffix SetNameVisible SetNameTagVisible SetPlayerTime SetTime SetPlayerWeather SetWeather SetRainLevel SetRainLevel SetReducedDebug SetReducedDebugInfoEnabled SetRotation SetRotation SetSaturation SetSaturationLevel SetScore SetScoreboardScore SetScoreObj SetScoreboardObjectiveName SetShoulder SetVisualShoulderParrot SetSidebar SetSidebarVisible SetSkin SetSkin SetSlot SetHotbarSlot SetSlotItem SetItemInSlot SetSpawnPoint SetSpawnPoint SetStatus SetStatus SetStingsStuck SetBeeStingsStuck SetTabListInfo SetTabListInfo SetTickRate SetTickRate SetVelocity SetVelocity SetVisualFire SetVisualFire SetWorldBorder SetWorldBorder SetXPProg SetXPProgress ShiftWorldBorder ShiftWorldBorder ShowInv ShowInventoryMenu SpectateTarget SpectateTarget SpectatorCollision SetSpectatorCollision SpectatorMode SetToSpectatorMode StopSound StopSounds SurvivalMode SetToSurvivalMode Teleport Teleport TpSequence TeleportSequence Undisguise Undisguise Vibration DisplayVibrationEffect WakeUpAnimation SendWakeUpAnimation WalkSpeed SetWalkSpeed Examples<pre><code>default:GivePotionEffect(pot(\"Saturation\")){\"Effect Particles\" = \"None\", \"Overwrite Effect\" = \"False\"};\n\ndefault:SetVisualShoulderParrot{\"Shoulder\" = \"Left\", \"Type\" = \"Cyan\"};\n\nallPlayers:SendMessage(s\"&lt;green&gt;%default&lt;white&gt;has joined!\");\n\nselected:SetToCreativeMode;\n\nvictim:Heal(game.EventDamage/2);\n\nshooter:GiveItems(item(\"Arrow\"));\n</code></pre>"},{"location":"codeblocks/action/#entity-actions","title":"Entity Actions","text":"<p>Entity actions use the following targets:</p> <ul> <li><code>selectedEntity</code></li> <li><code>defaultEntity</code></li> <li><code>killerEntity</code></li> <li><code>damagerEntity</code></li> <li><code>shooterEntity</code></li> <li><code>victimEntity</code></li> <li><code>allEntities</code></li> <li><code>allMobs</code></li> <li><code>projectile</code></li> <li><code>lastEntity</code></li> </ul> All entity action names DiamondFire Name Terracotta Name ArmorStandParts SetArmorStandParts ArmorStandPose SetArmorStandPose ArmorStandSlots SetArmorStandSlotInteractions AttachLead AttachLead AttackAnimation SendAttackAnimation BDisplayBlock SetBlockDisplayBlock BlockDisguise DisguiseAsBlock ClearPotions ClearPotionEffects CombatAttribute SetCombatAttribute CreeperCharged SetCreeperCharged Damage Damage DispInterpolation SetDisplayInterpolation DispRotAxisAngle SetDisplayRotationFromAxisAngle DispRotationEuler SetDisplayRotationFromEulerAngles DispTPDuration SetDisplayTeleportDuration DispTranslation SetDisplayTranslation DisplayBillboard SetDisplayBillboard DisplayBrightness SetDisplayBrightness DisplayCullingSize SetDisplayCullingSize DisplayGlowColor SetDisplayGlowColor DisplayMatrix SetDisplayTransformationMatrix DisplayScale SetDisplayScale DisplayShadow SetDisplayShadow DisplayViewRange SetDisplayViewRange EndCrystalBeam SetEndCrystalBeam Explode Explode FaceLocation FaceLocation FallingAttribute SetFallingAttribute FoxSleeping SetFoxSleeping FrogEat EatTarget GetAllEntityTags GetAllTags GetCustomTag GetTag GivePotion GivePotionEffect Heal Heal HealthAttribute SetHealthAttribute IDisplayItem SetItemDisplayItem IDisplayModelType SetItemDisplayModelType IgniteCreeper IgniteCreeper InteractResponse SetInteractionResponsive InteractionSize SetInteractionSize Jump Jump KBAttribute SetKnockbackAttribute LaunchFwd LaunchForward LaunchProj LaunchProjectile LaunchToward LaunchTowardLocation LaunchUp LaunchUp MiscAttribute SetMiscellaneousAttribute MobDisguise DisguiseAsMob MooshroomType SetMooshroomType MoveToLoc MoveToLocation MovementAttribute SetMovementAttribute PlayerDisguise DisguiseAsPlayer ProjectileItem SetProjectileDisplayItem Ram RamTarget Remove Remove RemoveCustomTag RemoveTag RemovePotion RemovePotionEffect RideEntity Ride SendAnimation SendAnimation SetAI SetAI SetAbsorption SetAbsorptionHealth SetAge SetAnimalAge SetAllayDancing SetAllayDancing SetAngry SetAngry SetArmor SetArmorItems SetArmsRaised SetArmsRaised SetArrowDamage SetBaseArrowDamage SetArrowHitSound SetArrowHitSound SetArrowNoClip SetArrowNoClip SetArrowPierce SetArrowPierce SetAxolotlColor SetAxolotlPattern SetBaby SetIsBaby SetBeeNectar SetBeeHasNectar SetBeeStinger SetBeeHasStinger SetBulletTarget SetShulkerBulletTarget SetCarryingChest SetCarryingChest SetCatResting SetCatResting SetCatType SetCatType SetCelebrating SetCelebrating SetCloudRadius SetPotionCloudRadius SetCollidable SetCollidable SetCreeperFuse SetCreeperFuse SetCreeperPower SetCreeperExplosionPower SetCustomTag SetTag SetDeathDrops SetDeathDropsEnabled SetDigging SetWardenDigging SetDragonPhase SetDragonPhase SetDyeColor SetDyeColor SetEndermanBlock SetEndermanHeldBlock SetEquipment SetEquipmentItem SetFallDistance SetFallDistance SetFireTicks SetFireTicks SetFishPattern SetTropicalFishPattern SetFishingTime SetFishingWaitTime SetFoxLeaping SetFoxLeaping SetFoxType SetFoxType SetFreezeTicks SetFreezeTicks SetFriction SetFriction SetFrogType SetFrogType SetGliding SetGliding SetGlowSquidDark SetGlowSquidDarkTicks SetGlowing SetGlowing SetGoatHorns SetGoatHorns SetGoatScreaming SetGoatScreaming SetGravity SetGravity SetHealth SetCurrentHealth SetHorseJump SetHorseJumpStrength SetHorsePattern SetHorsePattern SetInvisible SetInvisible SetInvulnerable SetInvulnerable SetItem SetItem SetLlamaColor SetLlamaColor SetMarker SetMarker SetMaxHealth SetMaximumHealth SetMinecartBlock SetMinecartBlock SetMobSitting SetSitting SetName SetCustomName SetNameColor SetNameColor SetNameVisible SetNameVisible SetPandaGene SetPandaGene SetPandaOnBack SetPandaOnBack SetPandaRolling SetPandaRolling SetPandaSadTicks SetPandaSadTicks SetParrotColor SetParrotColor SetPersistent SetPersistent SetPickupDelay SetPickupDelay SetPose SetPose SetProfession SetVillagerProfession SetProjSource SetProjectileShooter SetRabbitType SetRabbitType SetRearing SetRearing SetRiptiding SetRiptiding SetRotation SetRotation SetSaddle SetWearingSaddle SetSheepSheared SetSheepSheared SetShulkerPeek SetShulkerPeekPercent SetSilenced SetSilenced SetSize SetSize SetTarget SetTarget SetVelocity SetVelocity SetVexCharging SetVexCharging SetVillagerBiome SetVillagerBiome SetVillagerExp SetVillagerExperience SetVisualFire SetVisualFire SetWardenAnger SetWardenAngerLevel SetWitherInvul SetInvulnerabilityTicks ShearSheep ShearSheep SheepEat EatGrass SnifferState SetSnifferState SnowmanPumpkin SetSnowGolemPumpkin TDispBackground SetTextDisplayBackground TDisplayAlign SetTextDisplayTextAlignment TDisplayLineWidth SetTextDisplayLineWidth TDisplayOpacity SetTextDisplayTextOpacity TDisplaySeeThru SetTextDisplaySeeThrough TDisplayShadow SetTextDisplayTextShadow TDisplayText SetTextDisplayText Tame Tame Teleport Teleport Undisguise Undisguise UseItem UseItem Examples<pre><code>defaultEntity:Teleport(default.Location + vec(0,10,0));\n\ndefaultEntity:EatGrass;\n\nselectedEntity:Damage(5);\n\nprojectile:SetArrowNoClip{\"Has NoClip\" = \"Enable\"};\n\nallMobs:FaceLocation(default.Location)\n\nlastEntity:SetTag(\"owner\",\"%default\");\n</code></pre>"},{"location":"codeblocks/action/#game-actions","title":"Game Actions","text":"<p>Game actions use the <code>game</code> target. </p> All game action names DiamondFire Sign Name Terracotta Name ApplyTransaction ApplyTransaction BlockDropsOff DisableBlockDrops BlockDropsOn EnableBlockDrops BoneMeal BoneMealBlock BreakBlock BreakBlock CancelEvent CancelEvent ChangeSign ChangeSignText ClearContainer ClearContainer ClearItems ClearContainerItems CloneRegion CloneRegion DiscordWebhook SendDiscordWebhookMessage Explosion CreateExplosion FallingBlock SpawnFallingBlock FillContainer FillContainer Firework SpawnFirework GenerateTree GenerateTree LaunchProj LaunchProjectile Lightning SummonLightning LockContainer SetContainerLock RemoveItems RemoveContainerItems ReplaceItems ReplaceContainerItems SetBiome SetBiome SetBlock SetBlock SetBlockData SetBlockData SetBlockGrowth SetBlockGrowth SetBrushableItem SetItemInBrushableBlock SetCampfireItem SetCampfireItem SetContainer SetContainerContents SetContainerName SetContainerName SetEventDamage SetEventDamage SetEventHeal SetEventHealAmount SetEventProj SetEventProjectile SetEventSound SetEventSound SetEventXP SetEventExperience SetExhaustion SetEventExhaustion SetFurnaceSpeed SetFurnaceCookTime SetHead SetPlayerHead SetItemInSlot SetItemInContainerSlot SetLecternBook SetLecternBook SetRegion SetRegion ShulkerBullet SpawnShulkerBullet SignColor SetSignTextColor SpawnArmorStand SpawnArmorStand SpawnBlockDisp SpawnBlockDisplay SpawnCrystal SpawnEndCrystal SpawnEnderEye SpawnEyeOfEnder SpawnExpOrb SpawnExperienceOrb SpawnFangs SpawnEvokerFangs SpawnInteraction SpawnInteractionEntity SpawnItem SpawnItem SpawnItemDisp SpawnItemDisplay SpawnMob SpawnMob SpawnPotionCloud SpawnAreaOfEffectCloud SpawnTNT SpawnPrimedTNT SpawnTextDisplay SpawnTextDisplay SpawnVehicle SpawnVehicle TickBlock RandomTickBlock UncancelEvent UncancelEvent WebRequest SendWebRequest WriteTransaction WriteTransaction Examples<pre><code>game:SpawnMob(item(\"zombie_spawn_egg\"),game.EventBlockLocation);\n\ngame:CancelEvent;\n\ngame:SummonLightning(victim.Location);\n\ngame:SetBlock(loc(10,50,10),item(\"beacon\"));\n</code></pre>"},{"location":"codeblocks/control/","title":"Control","text":"<p>Instead of taking the form of <code>block:Action</code> like most other actions, all parts of the control block's functionality get their own keywords.</p>"},{"location":"codeblocks/control/#wait","title":"Wait","text":"<p>Wait exists as a standalone function. <pre><code>wait(10){\"Time Unit\" = \"Minutes\"};\ndefault:SendMessage(\"Bored yet?\");\n</code></pre></p> <p>Like other functions in Terracotta, neither arguments nor tags are required. Leaving out arguments will default to a wait time of 1; leaving out tags will default to a unit of ticks.</p> <pre><code>repeat {\n    allPlayers:DisplayParticleEffect(par(\"Flame\"),default.Location);\n    wait; #waits for one tick\n}\n</code></pre>"},{"location":"codeblocks/control/#return","title":"Return","text":"<p>Return uses the <code>return</code> keyword. For information on how to return values, see Return Value.</p> <pre><code>if (num:Random(1,2) == 2) {\n    return;\n}\n\ndefault:SendMessage(\"You got lucky!\");\n</code></pre>"},{"location":"codeblocks/control/#end-thread","title":"End Thread","text":"<p>End Thread uses the <code>endthread</code> keyword.</p> <pre><code>repeat Forever {\n    if (not selectedEntity?Exists) {\n        endthread;\n    }\n    selectedEntity:Heal(100);\n}\n</code></pre>"},{"location":"codeblocks/control/#continue-skip-iteration","title":"Continue (Skip Iteration)","text":"<p>The <code>continue</code> word acts as a SkipIteration control block.</p> <pre><code>for (local i on Range(1,10)) {\n    if (local i == 7) {\n        continue;\n    }\n    default:SendMessage(local i);\n}\n</code></pre> <p>The continue keyword does not need to be within a loop. When placed at the top level of a function, it will skip an iteration of the loop that called that function. If the continue keyword is contained by no loops at all, it will do nothing.</p> <pre><code>FUNCTION SkipLogic;\nif (local i == 7) {\n    continue;\n}\n</code></pre> <pre><code>FUNCTION Loop;\n\nfor (local i on Range(1,10)) {\n    #this behaves exactly the same as the earlier continue example\n    call SkipLogic;\n    default:SendMessage(local i);\n}\n</code></pre>"},{"location":"codeblocks/control/#break-stop-repeat","title":"Break (Stop Repeat)","text":"<p>The <code>break</code> keyword acts as a StopRepeat control block.</p> <pre><code>for (local i on Range(1,10)) {\n    if (local i == 7) {\n        break;\n    }\n    default:SendMessage(local i);\n}\n</code></pre> <p>All the same placement rules that apply to <code>continue</code> apply to <code>break</code>.</p>"},{"location":"codeblocks/event/","title":"Event","text":""},{"location":"codeblocks/event/#syntax","title":"Syntax","text":"<p>A script can be declared as a player or entity event by including its corresponding header at the top of it. </p> <pre><code>PLAYER_EVENT EventName\nENTITY_EVENT EventName\n</code></pre> <p>A single project cannot have multiple files declared as the same event.</p>"},{"location":"codeblocks/event/#lagslayer-cancel","title":"Lagslayer-Cancel","text":"<p>If an event is clickable with the cancel scythe, the <code>LAGSLAYER_CANCEL</code> header can be included to automatically cancel it if the plot code is halted due to lagslayer. This header can be placed either before or after the main event header.</p> <pre><code>PLAYER_EVENT Jump;\nLAGSLAYER_CANCEL;\n\ngame:CancelEvent;\n</code></pre>"},{"location":"codeblocks/function/","title":"Function","text":""},{"location":"codeblocks/function/#defining-functions","title":"Defining Functions","text":"<p>A script can be declared as a function by including the <code>FUNCTION</code> header at the top of it. Function names can be given special characters using the same syntax as Variables. <pre><code>FUNCTION FunctionName;\n# code here\n</code></pre></p> <pre><code>FUNCTION (\"function with special chars!!\");\n# code here\n</code></pre>"},{"location":"codeblocks/function/#parameters","title":"Parameters","text":"<p>Parameters can be added to the function using the <code>PARAM</code> header. The order the headers are listed will be the order the arguments appear in when calling. Parameter names can be given special characters using the same sytax as Variables.</p> <pre><code>PARAM paramName: type;\nPARAM (\"parameter with special chars!!\"): type;\n</code></pre> <p>Parameters can be made optional, plural, or both by putting the <code>optional</code> and <code>plural</code> keywords before the type.</p> <pre><code>FUNCTION killPlayer;\nPARAM killCauses: plural str;\nPARAM assisterUUID: optional str;\nPARAM itemsToDrop: optional plural item;\n</code></pre> <p>Optional parameters can specify a default value by placing an equal sign and the value after the type.</p> <pre><code>FUNCTION startGame;\nPARAM gameMode: optional str = \"deathmatch\";\n</code></pre> <p>To access the values passed into a parameter, use a line variable of the same name. <pre><code>FUNCTION sendRedMessage;\nPARAM message: str;\n\ndefault:SendMessage(\"&amp;c\" + line message);\n</code></pre></p> <p>Limiations</p> <p>Due to the quirks of DiamondFire, parameters have a few limitations that are uncommon to encounter but still important to know:</p> <ul> <li>Functions cannot have more than 26 parameters.</li> <li>Parameters that are both optional and plural cannot specify default values.</li> <li>Parameters typed as lists or dictionaries cannot specify default values.</li> <li>Parameters typed as variables cannot have the optional or plural modifiers applied.    </li> </ul>"},{"location":"codeblocks/function/#return-value","title":"Return Value","text":"<p>Functions can specify a return type using the <code>RETURNS</code> header. This also allows the function to be used in expressions. </p> <p>If a <code>RETURNS</code> header is present, a value can be placed after the <code>return</code> keyword to return it.</p> <pre><code>FUNCTION getRandomNumber;\nRETURNS num;\n\nreturn num:Random(1,10);\n</code></pre>"},{"location":"codeblocks/function/#calling-functions","title":"Calling Functions","text":"<p>Functions can be called using the <code>call</code> keyword followed by the function's name. </p> <pre><code>call FunctionName;\ncall (\"function with special chars!!\");\n</code></pre> <p>Arguments can be provided inside parentheses following the function name. <pre><code>call startGame(\"elimination\");\ncall (\"function with special chars!!\")(\"some argument\",5);\n</code></pre></p> <p>If a function returns a value, it can be used in expressions.</p> <pre><code>line result = call getRandomNumber(1,10);\nsaved (\"%uuid xp\") += saved (\"%uuid xpBoost\") * call getRandomNumber(20,30);\n</code></pre>"},{"location":"codeblocks/if/","title":"If / If Else","text":"<p>For information on how to write conditions, see Conditional Expressions.</p>"},{"location":"codeblocks/if/#if-statements","title":"If Statements","text":"<p>If statements use the <code>if</code> keyword followed by a condition wrapped in parentheses: <pre><code>if (condition) {\n    # code\n}\n</code></pre> Because there are no logic operators yet, if statements can only check one condition at a time.</p>"},{"location":"codeblocks/if/#else","title":"Else","text":"<p>Else statements can be placed immediately after an if statement using the <code>else</code> keyword: <pre><code>if (condition) {\n    # code\n} else {\n    # other code\n}\n</code></pre> As of now there is no 'else if' functionality, but this is likely to change in the future.</p>"},{"location":"codeblocks/process/","title":"Process","text":""},{"location":"codeblocks/process/#defining-processes","title":"Defining Processes","text":"<p>A script can be declared as a process by including the <code>PROCESS</code> header at the top of it. Process names can be given special characters using the same syntax as variables. <pre><code>PROCESS ProcessName;\n# code here\n</code></pre></p> <pre><code>PROCESS (\"process with special chars!!\");\n# code here\n</code></pre>"},{"location":"codeblocks/process/#starting-processes","title":"Starting Processes","text":"<p>Processes can be started using the <code>start</code> keyword followed by the process' name. </p> <pre><code>start ProcessName;\nstart (\"process with special chars!!\");\n</code></pre> <p>To change local variable and target behavior, use tags in the same way you would for any other action.</p> <pre><code>start gameLoop{\"Target Mode\" = \"With no targets\",\"Local Variables\" = \"Don't copy\"};\n</code></pre>"},{"location":"codeblocks/repeat/","title":"Repeat","text":""},{"location":"codeblocks/repeat/#repeat-loops","title":"Repeat Loops","text":"<p>Repeat Forever loops use the <code>repeat</code> keyword: <pre><code># this will repeat infinitely unless it contains a break keyword\nrepeat {\n    # code...\n}\n</code></pre></p> <p>Repeat Multiple loops use the <code>repeat</code> keyword followed by the number of times it should repeat wrapped in parentheses: <pre><code># will repeat 10 times\nrepeat (10) {\n    # code...\n}\n</code></pre> The index can be gotten by a variable using the <code>to</code> keyword: <pre><code>repeat (line index to 3) {\n    # code...\n}\n</code></pre></p>"},{"location":"codeblocks/repeat/#for-loops","title":"For Loops","text":"<p>For loops use the <code>for</code> keyword and come in two types, <code>on</code> and <code>in</code>.</p>"},{"location":"codeblocks/repeat/#on-loops","title":"On Loops","text":"<p>For loops using the <code>on</code> keyword are used to access Repeat actions like <code>Repeat On Path</code> and <code>Repeat Adjacently</code>. Their syntax is as follows: <pre><code>for (value on Action(args){tags}) {\n    # code...\n}\n</code></pre> The following actions are supported:</p> <ul> <li><code>Adjacent</code></li> <li><code>Grid</code></li> <li><code>Path</code></li> <li><code>Range</code></li> <li><code>Sphere</code></li> </ul> Example<pre><code>for (line l on Path(attacker.EyeLocation,victim.Location)) {\n    allPlayers:DisplayParticleEffect(par(\"Flame\"));\n}\n</code></pre> Example<pre><code>for (line i on Range(5,10,2)) {\n    default:SendMessage(line i);\n}\n</code></pre>"},{"location":"codeblocks/repeat/#in-loops","title":"In Loops","text":"<p>For loops using the <code>in</code> keyword are used to iterate over lists and dictionaries. Their syntax is as follows: <pre><code>for (value in list) {\n\n}\nfor (key, value in dict) {\n\n}\n</code></pre> Lists/dicts can be inlined, or variables can be used. Variable Example<pre><code>line data = {\n    \"key\" = \"value\",\n    \"apples\" = \"oranges\"\n};\n\nfor (line k, line v in line data) {\n    default:SendMessage(line k, line v);\n}\n</code></pre> Inlining Example<pre><code>for (line particle in [par(\"Flame\"),par(\"Cloud\")]) {\n    allPlayers:DisplayParticleEffect(default.Location,line particle);\n}\n</code></pre></p> <p>In order for variables of an unknown type to be iterated over, they must have their type manually specified using a Type Override. Additionally, the types of the variables to the left of the <code>in</code> keyword can also have their types overridden.</p> <p>Example<pre><code>for (line ability in saved (\"abilities %uuid\"): list) {\n    # code...\n}\n</code></pre> Example<pre><code>for (line skill, line level: num in saved (\"skills %uuid\"): dict) {\n    # code...\n}\n</code></pre></p>"},{"location":"codeblocks/repeat/#while-loops","title":"While Loops","text":"<p>While loops use the <code>while</code> keyword followed by a condition wrapped in parentheses: Example<pre><code>while (condition) {\n    # code...\n}\n</code></pre> The condition will be re-evaluated for every iteration, meaning actions and functions in the condition will be called repeatedly.</p> <p>For information on how to write conditions, see Conditional Expressions. Note that <code>player</code> and <code>entity</code> targets must be used in order to access if player or if entity conditions.</p> <p>Example<pre><code>while (num:Random(1,10) != 10) {\n    default:SendMessage(\"Still going!\");\n    wait;\n}\n</code></pre> Example<pre><code>while (!player?IsStandingOnBlock(item(\"obsidian\"))) {\n    default:Damage(1);\n    wait(20);\n}\n</code></pre></p>"},{"location":"codeblocks/select_object/","title":"Select Object","text":"<p>Selections in Terracotta work 1:1 with how they work in DiamondFire.</p> <p>Selections can be created using the <code>select</code> keyword followed by an action. They can be filtered by using the <code>filter</code> keyword.</p> <pre><code>select AllPlayers;\nfilter Randomly(2);\n\nglobal (\"%selected isHunter\") = 1;\n</code></pre> <p>For selection actions that use a condition, put the condition immediately after the action name. For information on how to write conditions, see Conditional Expressions. Note that <code>player</code> and <code>entity</code> targets must be used in order to access if player or if entity conditions.</p> <pre><code>select PlayersByCondition player?IsLookingAtBlock(item(\"emerald_block\"));\nfilter ByCondition global (\"%default isInGame\") == 1;\n\nselected:SendMessage(\"You live!\");\n\nselect Inverse;\nfilter ByCondition global (\"%default isInGame\") == 1;\n\nselected:Damage(999);\n</code></pre> <p>To reset the selection (equivalent to the block Select Object -&gt; Reset) use: <pre><code>select Nothing;\n</code></pre></p>"},{"location":"codeblocks/set_var/","title":"Set Variable","text":"<p>Math operations can be done much easier by using Expressions. You should only do math via setvar actions when you want absolute control over the template's codeblocks, otherwise its easier to let the compiler handle it for you.</p>"},{"location":"codeitems/dictionary/","title":"Dictionary","text":""},{"location":"codeitems/dictionary/#syntax","title":"Syntax","text":"<p>Dictionaries are created by enclosing key-value pairs in curly braces and seperating them with commas. Keys must be strings. Values can be expressions but keys cannot.</p> <pre><code>line itemData = {\n    \"name\" = \"Void Sword\",\n    \"damage\" = 14 * global damageBoost,\n    \"rarity\" = \"Rare\",\n};\n</code></pre> <p>Dictionaries can hold a maximum of 5,000 values. Nested lists/dictionaries and their values count towards that total.</p>"},{"location":"codeitems/dictionary/#indexing","title":"Indexing","text":"<p>To access values inside of a dictionary, use the Indexing Operation.</p>"},{"location":"codeitems/dictionary/#iteration","title":"Iteration","text":"<p>To iterate over a dictionary, use a for .. in loop. Example<pre><code>for (line key, line value in {\"name\" = \"Greg\", \"age\" = 32}) {\n    default:SendMessage(line key,\"is equal to\",line value);\n}\n</code></pre> Note that when using a variable of an unknown type (like a global variable declared in another file) its type must be manually specified in order to iterate over it. Example<pre><code>for (line key, line value in global dataDeclaredElsewhere: dict) {\n    default:SendMessage(line key,\"is equal to\",line value);\n}\n</code></pre></p>"},{"location":"codeitems/dictionary/#nesting","title":"Nesting","text":"<p>Lists and dictionaries can be nested. However, it's important keep in mind that DiamondFire tends to pass lists and dictionaries as copies not references so behavior regarding nested data may not be intuitive.</p> Example<pre><code>line itemData = {\n    \"name\" = \"Diamond Sword\",\n    \"enchantments\" = {\n        \"sharpness\" = 5\n    }\n};\n\n# this variable will grab a COPY!\nline enchantments = line itemData[\"enchantments\"]: dict;\ndefault:SendMessage(line enchantments); # {sharpness: 5}\n\n# modifications to the copy will NOT modify the original list\nline enchantments[\"knockback\"] = 2;\ndefault:SendMessage(line enchantments); # {sharpness: 5, knockback: 2}\ndefault:SendMessage(line itemData[\"enchantments\"]); # {sharpness: 5}\n</code></pre>"},{"location":"codeitems/dictionary/#operations","title":"Operations","text":""},{"location":"codeitems/dictionary/#addition","title":"+ (Addition)","text":""},{"location":"codeitems/dictionary/#txt-dict-txt","title":"<code>txt</code> + <code>dict</code>: <code>txt</code>","text":"<p>Converts the right Dictionary into a String then adds it onto the end of the left Styled Text. <pre><code>s\"Settings: \" + {\"theme\" = \"dark\"} = s\"Abilities: {theme: dark}\"\n</code></pre></p>"},{"location":"codeitems/dictionary/#dict-txt-txt","title":"<code>dict</code> + <code>txt</code>: <code>txt</code>","text":"<p>Converts the left Dictionary into a String then adds it at the beginning of the right Styled Text. <pre><code>{\"theme\" = \"light\"} + s\" is concerning...\" = s\"{theme: light} is concerning...\"\n</code></pre></p>"},{"location":"codeitems/game_value/","title":"Game Value","text":""},{"location":"codeitems/game_value/#syntax","title":"Syntax","text":"<p>If action syntax is like calling a method on a target, game value syntax is like accessing a property: <pre><code>target.Value\n</code></pre></p> <p>Values in the <code>Event Values</code> and <code>Plot Values</code> category can be accessed with the <code>game</code> target. Example<pre><code>game.EventItem\ngame.DamageEventCause\ngame.ServerTPS\ngame.PlayerCount\n</code></pre></p> <p>Values that apply to entities can be accessed using the following targets:</p> <ul> <li><code>selectedEntity</code></li> <li><code>defaultEntity</code></li> <li><code>killerEntity</code></li> <li><code>damagerEntity</code></li> <li><code>shooterEntity</code></li> <li><code>victimEntity</code></li> <li><code>projectile</code></li> <li><code>lastEntity</code></li> </ul> Example<pre><code>selectedEntity.SaddleItem\nvictimEntity.CurrentHealth\nlastEntity.UUID\n</code></pre> <p>Values that apply to players can be accessed using the following targets:</p> <ul> <li><code>default</code></li> <li><code>killer</code></li> <li><code>damager</code></li> <li><code>shooter</code></li> <li><code>victim</code></li> <li><code>selected</code></li> </ul> Example<pre><code>default.Name\nvictim.EyeLocation\nselected.AttackCooldownTicks\n</code></pre>"},{"location":"codeitems/list/","title":"List","text":""},{"location":"codeitems/list/#syntax","title":"Syntax","text":"<p>Lists are created by enclosing values in square brackets and seperating them with commas. The final value is allowed to have a trailing comma.</p> <pre><code>line fruits = [\"apple\",\"orange\",\"pear\"];\n\nline vegetables = [\n    \"corn\",\n    \"brocoli\",\n    \"carrot\", # this comma is allowed \n];\n</code></pre> <p>Lists can hold a maximum of 10,000 values. Nested lists/dictionaries and their values count towards that total.</p>"},{"location":"codeitems/list/#indexing","title":"Indexing","text":"<p>To access values inside of a list, use the Indexing Operation.</p> <p>Lists start at index <code>1</code>, NOT <code>0</code>.</p> <p>DiamondFire Jank</p> <p>Attempting to set to an index that is out of bounds of the list will instead overwrite the final value. <pre><code>line unlocks = [\"doubleJump\",\"teleport\"];\nline unlocks[3] = \"dash\"; # overwrites \"teleport\"\n\ndefault:SendMessage(line unlocks); # [doubleJump, dash]\n</code></pre></p> <p>To add values to lists, use <code>list:Append()</code> <pre><code>line unlocks = [\"doubleJump\",\"teleport\"];\nlist:Append(line unlocks,\"dash\");\n\ndefault:SendMessage(line unlocks); # [doubleJump, teleport, dash]\n</code></pre></p>"},{"location":"codeitems/list/#iteration","title":"Iteration","text":"<p>To iterate over a list, use a for .. in loop. Example<pre><code>for (line value in [1,17,400_006]) {\n    default:SendMessage(line value);\n}\n</code></pre> Note that when using a variable of an unknown type (like a global varaible declared in another file) its type must be manually specified in order to iterate over it. Example<pre><code>for (line value in global numbersDeclaredElsewhere: list) {\n    default:SendMessage(line value);\n}\n</code></pre></p>"},{"location":"codeitems/list/#nesting","title":"Nesting","text":"<p>Lists and dictionaries can be nested. However, it's important keep in mind that DiamondFire tends to pass lists and dictionaries as copies not references so behavior regarding nested data may not be intuitive.</p> Example<pre><code>line teamConfigurations = [\n    [\"red\",\"blue\"],\n    [\"green\",\"yellow\"]\n];\n\n# this variable will grab a COPY!\nline firstEntry = line teamConfigurations[1]: list;\ndefault:SendMessage(line firstEntry); # [red, blue]\n\n# modifications to the copy will NOT modify the original list\nline firstEntry[2] = \"yellow\";\ndefault:SendMessage(line firstEntry); # [red, yellow]\ndefault:SendMessage(line teamConfigurations[1]); # [red, blue]\n</code></pre>"},{"location":"codeitems/list/#operations","title":"Operations","text":""},{"location":"codeitems/list/#addition","title":"+ (Addition)","text":""},{"location":"codeitems/list/#txt-list-txt","title":"<code>txt</code> + <code>list</code>: <code>txt</code>","text":"<p>Converts the right list into a String then adds it onto the end of the left Styled Text. <pre><code>s\"Abilities: \" + [\"doubleJump\",\"dash\"] = s\"Abilities: [doubleJump, dash]\"\n</code></pre></p>"},{"location":"codeitems/list/#list-txt-txt","title":"<code>list</code> + <code>txt</code>: <code>txt</code>","text":"<p>Converts the left list into a String then adds it at the beginning of the right Styled Text. <pre><code>[\"Red Team\",\"Blue Team\"] + s\" have tied the match!\" = s\"[Red Team, Blue Team] have tied the match!\"\n</code></pre></p>"},{"location":"codeitems/location/","title":"Location","text":""},{"location":"codeitems/location/#syntax","title":"Syntax","text":"<p>Locations are created using the <code>loc</code> constructor. Like all constructors in Terracotta, the values passed into the constructor are Expressions and can take full advantage of their features.</p> <pre><code>loc(X: num, Y: num, Z: num, Pitch: num*, Yaw: num*)\n</code></pre> <p><code>Pitch</code> and <code>Yaw</code> are optional and will default to <code>0</code> if omitted.</p>"},{"location":"codeitems/location/#operations","title":"Operations","text":""},{"location":"codeitems/location/#addition","title":"+ (Addition)","text":""},{"location":"codeitems/location/#loc-vec-loc","title":"<code>loc</code> + <code>vec</code>: <code>loc</code>","text":"<p>Adds the XYZ coordinates of the right Vector to the XYZ coordinates of the left Location, leaving Pitch and Yaw untouched. <pre><code>loc(10, 50, 10, 90, 180) + vec(1, 2, 3) = loc(11, 52, 13, 90, 180)\n</code></pre></p>"},{"location":"codeitems/location/#loc-txt-txt","title":"<code>loc</code> + <code>txt</code>: <code>txt</code>","text":"<p>Converts the left Location into a String then adds it at the beginning of the right Styled Text. <pre><code>loc(10, 50, 10) + s\" is the spawn point!\" = s\"[10, 50, 10] is the spawn point!\"\n</code></pre></p>"},{"location":"codeitems/location/#txt-loc-txt","title":"<code>txt</code> + <code>loc</code>: <code>txt</code>","text":"<p>Converts the right Location into a String then adds it at the end of the left Styled Text. <pre><code>s\"The spawn point is: \" + loc(10, 50, 10) = s\"The spawn point is: [10, 50, 10]\"\n</code></pre></p>"},{"location":"codeitems/location/#-subtraction","title":"- (Subtraction)","text":""},{"location":"codeitems/location/#loc-vec-loc_1","title":"<code>loc</code> - <code>vec</code>: <code>loc</code>","text":"<p>Subtracts the XYZ coordinates of the right Vector from the XYZ coordinates of the left Location, leaving Pitch and Yaw untouched. <pre><code>loc(10, 50, 10, 90, 180) - vec(1, 2, 3) = loc(9, 48, 7, 90, 180)\n</code></pre></p>"},{"location":"codeitems/number/","title":"Number","text":""},{"location":"codeitems/number/#syntax","title":"Syntax","text":"<p>Any identifier starting with a digit, a period, or a <code>.</code> will be treated as a number. Numbers can also contain underscores between digits which can provide visual clarity without affecting the value of the number.</p> <pre><code># These are all valid numbers:\n1 0.5 .5 -1 -.823 1_000_000\n</code></pre> <p>The compiler will not prevent you from including more than 3 decimal places in a number, however the extra digits will be truncated when processed by DiamondFire due to its precision limit.</p> <pre><code>global PI = 3.14159;\ndefault:SendMessage(global PI); # 3.141\n</code></pre> <p>There is currently no way to manually write %math expressions. For equations, Terracotta's Expressions should be used.</p>"},{"location":"codeitems/number/#operations","title":"Operations","text":""},{"location":"codeitems/number/#addition","title":"+ (Addition)","text":""},{"location":"codeitems/number/#num-num-num","title":"<code>num</code> + <code>num</code>: <code>num</code>","text":"<p>Adds the left and right Numbers together. <pre><code>2 + 2 = 4 # Not 5\n</code></pre></p>"},{"location":"codeitems/number/#num-str-str","title":"<code>num</code> + <code>str</code>: <code>str</code>","text":"<p>Converts the left Number into a String then adds it onto the beginning of the left String. <pre><code>15 + \" killstreak!\" = \"15 killstreak!\"\n</code></pre></p>"},{"location":"codeitems/number/#num-txt-txt","title":"<code>num</code> + <code>txt</code>: <code>txt</code>","text":"<p>Converts the left Number into a String then adds it at the beginning of the right Styled Text. <pre><code>15 + s\" &lt;red&gt;seconds left!\" = s\"15 &lt;red&gt;seconds left!\"\n</code></pre></p>"},{"location":"codeitems/number/#str-num-str","title":"<code>str</code> + <code>num</code>: <code>str</code>","text":"<p>Converts the right Number into a String then adds it onto the end of the right String. <pre><code>\"Coins: \" + 5 = \"Coins: 5\"\n</code></pre></p>"},{"location":"codeitems/number/#txt-num-txt","title":"<code>txt</code> + <code>num</code>: <code>txt</code>","text":"<p>Converts the right Number into a String then adds it onto the end of the left Styled Text. <pre><code>s\"Your level: \" + 20 = s\"Your level: 20\"\n</code></pre></p>"},{"location":"codeitems/number/#-subtraction","title":"- (Subtraction)","text":""},{"location":"codeitems/number/#num-num-num_1","title":"<code>num</code> - <code>num</code>: <code>num</code>","text":"<p>Subtracts the right Number from the left Number. <pre><code>10 - 6 = 4\n</code></pre></p>"},{"location":"codeitems/number/#multiplication","title":"* (Multiplication)","text":""},{"location":"codeitems/number/#num-num-num_2","title":"<code>num</code> * <code>num</code>: <code>num</code>","text":"<p>Multiplies the two Numbers together. <pre><code>4 * 5 = 20\n</code></pre></p>"},{"location":"codeitems/number/#str-num-str_1","title":"<code>str</code> * <code>num</code>: <code>str</code>","text":"<p>Repeats the left String <code>right number</code> times. <pre><code>\"jere\" * 3 = \"jerejerejere\"\n</code></pre></p>"},{"location":"codeitems/number/#vec-num-vec","title":"<code>vec</code> * <code>num</code>: <code>vec</code>","text":"<p>Multiplies the length of the left Vector by the right Number. <pre><code>vec(2,0,1) * 3 = vec(6,0,3)\n</code></pre></p>"},{"location":"codeitems/number/#division","title":"/ (Division)","text":""},{"location":"codeitems/number/#num-num-num_3","title":"<code>num</code> / <code>num</code>: <code>num</code>","text":"<p>Divides the left Number by the right Number. <pre><code>2 / 4 = 0.5\n</code></pre></p>"},{"location":"codeitems/number/#vec-num-vec_1","title":"<code>vec</code> / <code>num</code>: <code>vec</code>","text":"<p>Divides the length of the left Vector by the right Number. <pre><code>vec(10,5,0) / 2 = vec(5,2.5,0)\n</code></pre></p>"},{"location":"codeitems/number/#exponentiation","title":"^ (Exponentiation)","text":""},{"location":"codeitems/number/#num-num-num_4","title":"<code>num</code> ^ <code>num</code>: <code>num</code>","text":"<p>Raises the left Number to the power of the right Number. <pre><code>2 ^ 10 = 1024\n</code></pre></p>"},{"location":"codeitems/number/#modulus","title":"% (Modulus)","text":"<p>Returns the modulus of the left Number and the right Number. <pre><code>43 % 20 = 3\n</code></pre></p>"},{"location":"codeitems/particle/","title":"Particle","text":""},{"location":"codeitems/particle/#syntax","title":"Syntax","text":"<p>Particles are created using the <code>par</code> constructor. Like all constructors in Terracotta, the values passed into the constructor are Expressions and can take full advantage of their features. </p> <pre><code>par(Particle: str, Data: dict*)\n</code></pre> <p>If the data dictionary is omitted, all fields will use their default values.</p> <p><code>Particle</code> is the name of the potion that appears at the top of a particle effect's button, NOT its minecraft id.</p> <pre><code>par(\"Critical Hit\")\n</code></pre> <p></p>"},{"location":"codeitems/particle/#data-dictionary","title":"Data Dictionary","text":"<p>Data about the behavior of a particle like amount, color, spread, etc. are provided inside of a dictionary at the end of the particle constructor.</p> <pre><code>par[\"Dust\",{\n    \"Amount\" = 10,\n    \"Spread\" = [1,1],\n    \"Color\" = \"#ff0000\",\n    \"Color Variation\" = 0\n}]\n</code></pre> <p>Info</p> <p>While the values passed into the <code>data</code> dictionary can be expressions, the dictionary itself cannot.  Valid<pre><code>par(\"Flame\",{\"Amount\" = num:Random(1,10)})\n</code></pre> Invalid<pre><code>global data = {\"Amount\" = 10};\npar(\"Flame\",global data)\n</code></pre></p> <p>The following are all the possible data fields. <code>Amount</code> and <code>Spread</code> can always be specified, the rest may or may not be available depending on the type of particle.</p>"},{"location":"codeitems/particle/#amount","title":"Amount","text":"<p>A <code>num</code> specifying how many particles to spawn. </p> <p>Defaults to <code>1</code> if omitted.</p>"},{"location":"codeitems/particle/#spread","title":"Spread","text":"<p>A <code>list</code> containing two <code>num</code>s, the first for horizontal spread and the second for vertical spread. The numbers inside the list can be expressions, however the list itself cannot.</p> <p>Defaults to <code>[0,0]</code> if omitted.</p> Example<pre><code>\"Spread\" = [0.5, 0] # Spawns particles in a flat disc.\n</code></pre>"},{"location":"codeitems/particle/#motion","title":"Motion","text":"<p>A <code>vec</code> specifying the velocity of the particles. Longer length vectors will result in faster movement. </p> <p>Defaults to <code>vec(1, 0, 0)</code> if omitted.</p> Example<pre><code>\"Motion\" = vec(0, 5, 0) # Launches particles straight up.\n</code></pre>"},{"location":"codeitems/particle/#motion-variation","title":"Motion Variation","text":"<p>A <code>num</code> (0-100) specifying how much to randomize the motion of the particles. Any digits after the decimal place will be removed by DiamondFire. <code>0</code> will mean the exact value of <code>Motion</code> is always used, <code>100</code> will mean the direction is completely random and the speed will be anywhere between 100% and 0% of the length of <code>Motion</code>. </p> <p>Defaults to <code>100</code> if omitted.</p>"},{"location":"codeitems/particle/#color","title":"Color","text":"<p>A <code>str</code> specifying the color of the particles as a hexadecimal RGB color. Six-digit and three-digit colors are both allowed, and a <code>#</code> at the beginning of the string is optional.</p> <p>Defaults to <code>\"#ff0000\"</code> if omitted.</p> Example<pre><code># These are all valid ways to specify Color:\n\"Color\" = \"#8800ff\"\n\"Color\" = \"#80f\"\n\"Color\" = \"000000\"\n\"Color\" = \"fff\"\n</code></pre>"},{"location":"codeitems/particle/#color-variation","title":"Color Variation","text":"<p>A <code>num</code> (0-100) specifying how much to randomize the color of the particles. Any digits after the decimal place will be removed by DiamondFire. <code>0</code> will mean the exact value of <code>Color</code> is always used, <code>100</code> will mean the color is completely random.</p> <p>Defaults to <code>0</code> if omitted.</p>"},{"location":"codeitems/particle/#fade-color","title":"Fade Color","text":"<p>A <code>str</code> specifying the color to transition to. Uses the same syntax as Color.</p> <p>Defaults to <code>\"#000000\"</code> if omitted.</p>"},{"location":"codeitems/particle/#material","title":"Material","text":"<p>A <code>str</code> specifying the material id of the particles. Uses item ids, NOT names.</p> <p>Defaults to <code>\"oak_log\"</code> if omitted.</p> Example<pre><code>\"Material\" = \"diamond_block\"\n</code></pre>"},{"location":"codeitems/particle/#size","title":"Size","text":"<p>A <code>num</code> specifying the size of the particles.</p> <p>Defaults to <code>1</code> if omitted.</p>"},{"location":"codeitems/particle/#size-variation","title":"Size Variation","text":"<p>A <code>num</code> (0-100) specifying how much to randomize the size of the particles. Any digits after the decimal place will be removed by DiamondFire. <code>0</code> will mean the exact value of <code>Size</code> is always used, <code>100</code> will mean the size could be anywhere between 3*<code>Size</code> and 0.</p> <p>Defaults to <code>0</code> if omitted.</p>"},{"location":"codeitems/particle/#roll","title":"Roll","text":"<p>A <code>num</code> specifying the rotation of the particles.</p> <p><code>Roll</code> uses RADIANS as a unit, not degrees. To convert from degrees to radians, use this.</p> <p>Defaults to <code>0</code> if omitted.</p> Example<pre><code>\"Roll\" = 3.14159 # 180 degrees\n</code></pre>"},{"location":"codeitems/particle/#opacity","title":"Opacity","text":"<p>A <code>num</code> (0-100) specifying the opacity of the particles. Any digits after the decimal place will be removed by DiamondFire. <code>0</code> is completely transparent, <code>100</code> is completely visible. </p> <p>Minecraft will round values of 10 and below down to 0 when displaying, meaning the most transparent a particle can be while still being visible will have an opacity of 11.</p> <p>Defaults to <code>100</code> if omitted.</p> <p>Warning</p> <p>DiamondFire currently has a hard time handling particles that have the <code>Opacity</code> field. To prevent unexpected glitchy behavior, it's best to avoid any particles that have this field until DiamondFire fixes them.</p>"},{"location":"codeitems/particle/#operations","title":"Operations","text":""},{"location":"codeitems/particle/#txt-par-txt","title":"<code>txt</code> + <code>par</code>: <code>txt</code>","text":"<p>Converts the right Particle into a String then adds it onto the end of the left Styled Text. <pre><code>s\"Selected trail: \" + par(\"Flame\") = s\"Selected Trail: Flame[1][0.0,0.0][1.0,0.0,0.0|100%]\"\n</code></pre></p>"},{"location":"codeitems/particle/#par-txt-txt","title":"<code>par</code> + <code>txt</code>: <code>txt</code>","text":"<p>Converts the left Particle into a String then adds it at the beginning of the right Styled Text. <pre><code>par(\"Bubble\") + s\" is a particle.\" = s\"Bubble[1][0.0,0.0][1.0,0.0,0.0|100%] is a particle.\"\n</code></pre></p>"},{"location":"codeitems/potion/","title":"Potion","text":""},{"location":"codeitems/potion/#syntax","title":"Syntax","text":"<p>Potions are created using the <code>pot</code> constructor. Like all constructors in Terracotta, the values passed into the constructor are Expressions and can take full advantage of their features.</p> <pre><code>pot(Potion: str, Amplifier: num*, Duration: num*)\n</code></pre> <p><code>Amplifier</code> is optional and will default to <code>1</code> if omitted.</p> <p><code>Duration</code> is specified in ticks, meaning a duration of <code>20</code> is equal to one second. <code>Duration</code> is optional and will default to infinite if omitted.</p> <pre><code># Terracotta can pre-calculate `15*20` as `300` and insert `300` directly into \n# the potion item meaning you can safely do multiplications like this without\n# creating extra codeblocks. Both examples will compile to the exact same code.\npot(\"Regeneration\", 1, 15*20)\npot(\"Regeneration\", 1, 300)\n</code></pre> <p><code>Potion</code> is the name of the potion that appears at the top of a potion effect's button, NOT its minecraft id.</p> <pre><code>pot(\"Dolphin's Grace\", 1, 300)\n</code></pre> <p></p>"},{"location":"codeitems/potion/#operations","title":"Operations","text":""},{"location":"codeitems/potion/#txt-pot-txt","title":"<code>txt</code> + <code>pot</code>: <code>txt</code>","text":"<p>Converts the right Potion into a String then adds it onto the end of the left Styled Text. <pre><code>s\"Your curse: \" + pot(\"Weakness\", 2, 10*20) = s\"Your curse: Weakness 2 - 0:10\"\n</code></pre></p>"},{"location":"codeitems/potion/#pot-txt-txt","title":"<code>pot</code> + <code>txt</code>: <code>txt</code>","text":"<p>Converts the left Potion into a String then adds it at the beginning of the right Styled Text. <pre><code>pot(\"Wither\", 5, 1200) + s\" is very painful.\" = s\"Wither 5 - 1:00 is very painful.\"\n</code></pre></p>"},{"location":"codeitems/sound/","title":"Sound","text":""},{"location":"codeitems/sound/#syntax","title":"Syntax","text":"<p>Sounds are created using the <code>snd</code> and <code>csnd</code> constructors. Like all constructors in Terracotta, the values passed into the constructor are Expressions and can take full advantage of their features.</p> <pre><code>snd(Sound: str, Volume: num*, Pitch: num*, Variant: str*)\ncsnd(Sound: str, Volume: num*, Pitch: num*)\n</code></pre> <p>Constant numbers passed directly into the constructor will maintain their full precision, however if an expression that evaluates to a number is passed, that number's precision will be limited to three decimal places due to DiamondFire's precision limit.</p> <p><code>Pitch</code> is optional and defaults to <code>1</code> if omitted. <code>Volume</code> is optional and defaults to <code>2</code> if omitted.</p> <p>To play a random variant every time, omit the <code>Variant</code> argument.</p> <p>When using the <code>snd</code> constructor, <code>Sound</code> is the name that appears at the top of a sound's button, and <code>Variant</code> is the ID that appears in the button's lore. <pre><code>snd(\"Stone Break\", 1, 1, \"stone1\");\n</code></pre> </p> <p>When using the <code>csnd</code> constructor, <code>Sound</code> is the minecraft id of the sound that would be used in a /playsound command. This allows the use of custom sounds provided by a plot resource pack.</p> <pre><code># Custom sounds can be played.\ncsnd(\"item.custom_magic_wand.use\")\n\n# Vanilla sounds can also be played with their Minecraft ids.\n# Using csnd for vanilla sounds is not recommended as variants cannot\n# be specified and a sound's Minecraft id may change between updates.\ncsnd(\"block.stone.break\", 1, 0.8)\n</code></pre>"},{"location":"codeitems/sound/#operations","title":"Operations","text":""},{"location":"codeitems/sound/#addition","title":"+ (Addition)","text":""},{"location":"codeitems/sound/#txt-snd-txt","title":"<code>txt</code> + <code>snd</code>: <code>txt</code>","text":"<p>Converts the right Sound into a String then adds it onto the end of the left Styled Text. <pre><code>s\"Cool sound: \" + snd(\"Stone Break\", 1, 1, \"stone1\") = s\"Cool sound: Stone Break,stone1[1.0][1.0]\"\n</code></pre></p>"},{"location":"codeitems/sound/#snd-txt-txt","title":"<code>snd</code> + <code>txt</code>: <code>txt</code>","text":"<p>Converts the left Sound into a String then adds it at the beginning of the right Styled Text. <pre><code>snd(\"Stone Break\", 1, 1, \"stone1\") + s\" is a cool sound.\" = s\"Stone Break,stone1[1.0][1.0] is a cool sound.\"\n</code></pre></p>"},{"location":"codeitems/string/","title":"String","text":""},{"location":"codeitems/string/#syntax","title":"Syntax","text":"<p>Strings can use either single or double quotes and compile directly to DiamondFire String items.</p> <pre><code>default:SendMessage(\"double quote string\", 'single quote string');\n</code></pre>"},{"location":"codeitems/string/#color-codes-ampersand-conversion","title":"Color Codes (Ampersand Conversion)","text":"<p>When ampersands (<code>&amp;</code>) are immediately proceeded by a character that makes a valid formatting code, they are automatically converted to section symbols (<code>\u00a7</code>) to make that formatting code functional. To prevent ampersands from being converted at all, they can be escaped (see Escape Sequences).</p> <pre><code># this message will show up green:\ndefault:SendMessage(\"&amp;acolored text\"); # colored text\n\n# this message will show up white:\ndefault:SendMessage(\"\\&amp;aun-colored text\"); # &amp;aun-colored text\n\n# this ampersand doesn't need to be escaped at all:\ndefault:SendMessage(\"good &amp; evil\"); # good &amp; evil\n</code></pre>"},{"location":"codeitems/string/#escape-sequences","title":"Escape Sequences","text":"<p>Quotes, ampersands, and backslashes themselves can all be escaped by immediately proceeding them with a backslash.</p> <pre><code>default:SendMessage('jeff\\'s',\"\\\"amazing\\\"\",\"creation\"); #jeff's \"amazing\" creation\ndefault:SendMessage(\" / iron\\&amp;diamonds \\\\ \"); # / iron&amp;diamonds \\ \n</code></pre> <p>Newlines can be inserted using <code>\\n</code>. <pre><code>default:SendMessage(\"%default's stats:\\nCoins: %var(%default coins)\\nLevel: %var(%default level)\");\n</code></pre></p>"},{"location":"codeitems/string/#unicode-characters","title":"Unicode Characters","text":"<p>Unicode characters be inserted using the <code>\\u</code> escape code. This is especially useful when working with custom UI elements.</p> <p>Warning</p> <p>Unicode escape sequences are evaluated at compile time. Due to this, the following is invalid: This will NOT compile!<pre><code>line characterCode = \"2620\";\n\ndefault:SendMessage(\"\\u%var(characterCode)\");\n</code></pre></p>"},{"location":"codeitems/string/#four-digits","title":"Four Digits","text":"<p>Four digit unicode characters can be inserted using <code>\\uXXXX</code>, where each X is a hexadecimal digit. <pre><code>default:SendMessage(\"\\u2620 You died!\") # \u2620 You died!\n</code></pre></p>"},{"location":"codeitems/string/#more-or-less-digits","title":"More or Less Digits","text":"<p>Unicode characters with more or less than 4 digits can be inserted using <code>\\u{}</code>, with any number of hexadecimal digits inside the braces.</p> <pre><code>default:SendMessage(\"\\u{1F525}\"); # \ud83d\udd25\ndefault:SendMessage(\"\\u{44}\\u{46}\"); # DF\n</code></pre>"},{"location":"codeitems/string/#operations","title":"Operations","text":""},{"location":"codeitems/string/#addition","title":"+ (Addition)","text":""},{"location":"codeitems/string/#str-str-str","title":"<code>str</code> + <code>str</code>: <code>str</code>","text":"<p>Adds the right String onto the end of the left String. <pre><code>\"Hello \" + \"World!\" = \"Hello World!\"\n</code></pre></p>"},{"location":"codeitems/string/#str-txt-txt","title":"<code>str</code> + <code>txt</code>: <code>txt</code>","text":"<p>Adds the left String onto the beginning of the right Styled Text. <pre><code>\"Hello \" + s\"&lt;rainbow&gt;World!\" = s\"Hello &lt;rainbow&gt;World!\"\n</code></pre></p>"},{"location":"codeitems/string/#str-num-str","title":"<code>str</code> + <code>num</code>: <code>str</code>","text":"<p>Converts the right Number into a String then adds it onto the end of the right String. <pre><code>\"Coins: \" + 5 = \"Coins: 5\"\n</code></pre></p>"},{"location":"codeitems/string/#txt-str-txt","title":"<code>txt</code> + <code>str</code>: <code>txt</code>","text":"<p>Adds the right String onto the end of the left Styled Text. <pre><code>s\"&lt;rainbow&gt;Hello \" + \"World!\" = s\"&lt;rainbow&gt;Hello World!\"\n</code></pre></p>"},{"location":"codeitems/string/#num-str-str","title":"<code>num</code> + <code>str</code>: <code>str</code>","text":"<p>Converts the left Number into a String then adds it onto the beginning of the left String. <pre><code>15 + \" killstreak!\" = \"15 killstreak!\"\n</code></pre></p>"},{"location":"codeitems/string/#multiplication","title":"* (Multiplication)","text":""},{"location":"codeitems/string/#str-num-str_1","title":"<code>str</code> * <code>num</code>: <code>str</code>","text":"<p>Repeats the left String <code>right number</code> times. <pre><code>\"jere\" * 3 = \"jerejerejere\"\n</code></pre></p>"},{"location":"codeitems/styled_text/","title":"Styled Text","text":"<p>To turn a string into a Styled Text, prefix it with <code>s</code>.</p> <pre><code>default:SendMessage(s\"&lt;green&gt;&lt;bold&gt;Welcome to\", s'&lt;rainbow&gt;awesome skyminer!');\n</code></pre> <p>Escape Sequences work the same in Styled Texts as they do in Strings.</p> <p>Ampersand Conversion does not occur at all in Styled Texts. <pre><code># this &amp; will not get converted even though &amp;a is a color code:\ndefault:SendMessage(s\"&amp;aawesome message\"); # &amp;aawesome message\n</code></pre></p>"},{"location":"codeitems/styled_text/#operations","title":"Operations","text":""},{"location":"codeitems/styled_text/#addition","title":"+ (Addition)","text":""},{"location":"codeitems/styled_text/#txt-any-txt","title":"<code>txt</code> + <code>any</code>: <code>txt</code>","text":"<p>Converts the right value into a String then adds it onto the end of the left Styled Text. <pre><code>s\"Spawn point: \" + loc(10,50,10) = s\"Spawn point: [10,50,10]\"\ns\"Unlocks: \" + [\"Diamond Sword\", \"Health Up\"] = s\"Unlocks: [Diamond Sword, Health Up]\"\n</code></pre></p>"},{"location":"codeitems/styled_text/#any-txt-txt","title":"<code>any</code> + <code>txt</code>: <code>txt</code>","text":"<p>Converts the left value into a String then adds it at the beginning of the right Styled Text. <pre><code>15 + s\" &lt;red&gt;seconds left!\" = s\"15 &lt;red&gt;seconds left!\"\n</code></pre></p>"},{"location":"codeitems/variable/","title":"Variable","text":""},{"location":"codeitems/variable/#syntax","title":"Syntax","text":"<p>Variables are accessed by a scope keyword followed by a name. <pre><code>global gameVariable\nsaved savedVariable\nlocal localVariable\nline lineVariable\n</code></pre></p> <p>In DiamondFire, variables do not need to be declared, so they don't need to be declared in Terracotta either. Think of variables in Terracotta as one-to-one representations of variable code items.</p> <p>This means that whenever a variable is being referenced, you must provide its scope. This holds true even if a variable of that name has been referenced with a given scope already.</p> <pre><code>local message = \"Hello world!\";\n\n# specifying the scope here is REQUIRED!\ndefault:SendMessage(local message);\n\n# any scope can be used\ndefault:SendMessage(local message, global message);\n</code></pre>"},{"location":"codeitems/variable/#string-names","title":"String Names","text":"<p>To use text codes or special characters in variable names, wrap the variable name in a string and wrap the string in parenthese.</p> <pre><code>global (\"%var(team) playerCount\") = game.SelectionSize;\nsaved (\"%uuid gamesPlayed\") += 1;\n</code></pre> <p>This string value does not accept expressions! It must be a single string literal.</p>"},{"location":"codeitems/variable/#types","title":"Types","text":"<p>Variable types only matter when using variables in Expressions. For any other uses like inserting them into arguments, types do not matter. As of now, there is no strict typing mode.</p> <p>Terracotta has a level of type inference built in. Types can be inferred in the following scenarios:</p> Type inference scenarios (click to expand) <ol> <li> <p>Setting a variable to a value <pre><code># type is inferred as vector for future uses of the variable\nglobal var = vec(1,2,3);\n</code></pre></p> </li> <li> <p>Setting a variable to the result of a function <pre><code># type is inferred as string for future uses of the variable\nglobal blockData = var:GetAllBlockData(default.TargetBlockLocation);\n</code></pre></p> </li> <li> <p>Any action that has a return type controlled by tags <pre><code># type is inferred as item for future uses of the variable\nglobal itemType = item:GetMaterial(default.MainHandItem){\"Return Value Type\" = \"Item\"};\n</code></pre> <pre><code># type is inferred as string for future uses of the variable\nglobal itemType = item:GetMaterial(default.MainHandItem){\"Return Value Type\" = \"Item Name (Golden Apple)\"};\n</code></pre></p> </li> <li> <p>SetToRandom if all arguments are the same type <pre><code># type is inferred as location for future uses of the variable\nglobal teleportLoc = var:SetToRandom(loc(10,50,10), loc(52,27,88), global spawnLoc: loc);\n</code></pre> <pre><code># type remains unknown\nglobal teleportLoc = var:SetToRandom(50,\"fifty\");\n</code></pre></p> </li> <li> <p>Inside if var?IsType <pre><code>if (var?IsType(saved (\"%uuid trail\")){\"Variable Type\" = \"Particle\"}) {\n    # type is inferred as particle inside this if block\n}\n# outside the if block, type remains unknown\n</code></pre></p> </li> <li> <p>Accessing parameter values <pre><code>FUNCTION DisplayEffect;\nPARAM effect: par;\n# type is inferred as particle for future uses of the line variable 'effect'\n</code></pre></p> </li> </ol> <p>In many cases, like accessing globals created in other scripts, that's not enough. So, anywhere a variable is referenced, it can specify its expected type by putting <code>: &lt;type&gt;</code> after the variable name.</p> <pre><code>line definitelyAString: str\n</code></pre> <p>When specified in an expression, the type hint is local to that one use of the variable.</p> <pre><code>FUNCTION GoToSpawn;\n\ndefault:Teleport(global spawnLocation: loc + vec(0,1,0));\nwait(20);\n\n# this will fail to compile because the compiler doesn't know the type of spawnLocation\ndefault:Teleport(global spawnLocation + vec(0,10,0));\n</code></pre> <p>Types can be given to variables on their own and will persist for the rest of the file unless overridden.</p> <pre><code>FUNCTION GoToSpawn;\n\n# spawnLocation will have type 'loc' for the rest of the script\nglobal spawnLocation: loc;\n\ndefault:Teleport(global spawnLocation + vec(0,1,0));\nwait(20);\ndefault:Teleport(global spawnLocation + vec(0,10,0));\n</code></pre>"},{"location":"codeitems/vector/","title":"Vector","text":""},{"location":"codeitems/vector/#syntax","title":"Syntax","text":"<p>Vectors are created using the <code>vec</code> constructor. Like all constructors in Terracotta, the values passed into the constructor are Expressions and can take full advantage of their features.</p> <pre><code>vec(X: num, Y: num, Z: num)\n</code></pre>"},{"location":"codeitems/vector/#operations","title":"Operations","text":""},{"location":"codeitems/vector/#addition","title":"+ (Addition)","text":""},{"location":"codeitems/vector/#vec-vec-vec","title":"<code>vec</code> + <code>vec</code>: <code>vec</code>","text":"<p>Adds the XYZ coordinates of the Vectors together. <pre><code>vec(5,10,15) + vec(3,2,1) = vec(8,12,16)\n</code></pre></p>"},{"location":"codeitems/vector/#loc-vec-loc","title":"<code>loc</code> + <code>vec</code>: <code>loc</code>","text":"<p>Adds the XYZ coordinates of the right Vector to the XYZ coordinates of the left Location, leaving Pitch and Yaw untouched. <pre><code>loc(10, 50, 10, 90, 180) + vec(1, 2, 3) = loc(11, 52, 13, 90, 180)\n</code></pre></p>"},{"location":"codeitems/vector/#vec-txt-txt","title":"<code>vec</code> + <code>txt</code>: <code>txt</code>","text":"<p>Converts the left Vector into a String then adds it at the beginning of the right Styled Text. <pre><code>vec(0, 42, 0) + s\" is a cool vector!\" = s\"&lt;0, 42, 0&gt; is a cool vector!\"\n</code></pre></p>"},{"location":"codeitems/vector/#txt-loc-txt","title":"<code>txt</code> + <code>loc</code>: <code>txt</code>","text":"<p>Converts the right Vector into a String then adds it at the end of the left Styled Text. <pre><code>s\"Very cool vector: \" + vec(0, 42, 0) = s\"Very cool vector: &lt;0, 42, 0&gt;\"\n</code></pre></p>"},{"location":"codeitems/vector/#-subtraction","title":"- (Subtraction)","text":""},{"location":"codeitems/vector/#vec-vec-vec_1","title":"<code>vec</code> - <code>vec</code>: <code>vec</code>","text":"<p>Subtracts the XYZ coordinates of the right Vector from the XYZ coordinates of the left Vector. <pre><code>vec(5,10,15) - vec(3,2,1) = vec(2,8,14)\n</code></pre></p>"},{"location":"codeitems/vector/#loc-vec-loc_1","title":"<code>loc</code> - <code>vec</code>: <code>loc</code>","text":"<p>Subtracts the XYZ coordinates of the right Vector from the XYZ coordinates of the left Location, leaving Pitch and Yaw untouched. <pre><code>loc(10, 50, 10, 90, 180) - vec(1, 2, 3) = loc(9, 48, 7, 90, 180)\n</code></pre></p>"},{"location":"codeitems/vector/#multiplication","title":"* (Multiplication)","text":""},{"location":"codeitems/vector/#vec-num-vec","title":"<code>vec</code> * <code>num</code>: <code>vec</code>","text":"<p>Multiplies the length of the left Vector by the right Number. <pre><code>vec(2,0,1) * 3 = vec(6,0,3)\n</code></pre></p>"},{"location":"codeitems/vector/#division","title":"/ (Division)","text":""},{"location":"codeitems/vector/#vec-num-vec_1","title":"<code>vec</code> / <code>num</code>: <code>vec</code>","text":"<p>Divides the length of the left Vector by the right Number. <pre><code>vec(10,5,0) / 2 = vec(5,2.5,0)\n</code></pre></p>"},{"location":"getting_started/installation_guide/","title":"Installation Guide","text":""},{"location":"getting_started/installation_guide/#1-install-the-vscode-extension","title":"1. Install the VSCode Extension","text":"<p>Official support for other editors isn't currently planned, though that might change in the future.</p> <p>Install VSCode if you haven't already. It will be the editor you use to write Terracotta code.</p> <p>The extension can be downloaded from the Extension Marketplace here, or by searching 'Terracotta' in the VSCode extensions tab. Once downloaded, it should set itself up automatically. If you see this message in the bottom right, that means it has successfully installed itself:</p> <p></p> <p>For more information on everything the extension provides, see Extension Features. </p>"},{"location":"getting_started/installation_guide/#2-set-up-codeclient","title":"2. Set up CodeClient","text":"<p>Install the CodeClient mod manually or using your launcher of choice. </p> <p>After it is installed, join DiamondFire and run <code>/ccconfig</code>. Under the General tab, turn on <code>CodeClient API</code> and click <code>Save Changes</code>. Restart the game if prompted to do so.</p> <p></p>"},{"location":"getting_started/installation_guide/#thats-it","title":"That's it!","text":"<p>Terracotta is now ready for use. </p> <p>Next: Learn how to compile your first plot</p>"},{"location":"getting_started/language_overview/","title":"Language Overview","text":""},{"location":"getting_started/language_overview/#scripts","title":"Scripts","text":"<p>Every Terracotta script represents one line of codeblocks in DiamondFire. In other words, each script represents exactly one function, process, or event. These scripts are seperated into two parts: Headers that appear at the top of the file and the code that appears below them. </p> <p>Headers determine the type of codeline (e.g. whether a line starts with a PLAYER_EVENT block or a FUNCTION block) and any additional information about it (e.g. the cancel scythe or parameters).</p> Example Event<pre><code># header section\nLAGSLAYER_CANCEL;\nPLAYER_EVENT Jump;\n\n# code section\ngame:CancelEvent;\n</code></pre> Example Function<pre><code># header section\nFUNCTION sendCenteredMessage;\nPARAM message: txt;\n\n# code section\ndefault:SendMessage(line message){\"Alignment Mode\" = \"Centered\"};\n</code></pre>"},{"location":"getting_started/language_overview/#semantics","title":"Semantics","text":"<p>Terracotta is a non-whitespace-significant language that relies on semicolons to separate instructions. This means complex lines can be arbitrarily split up however you see fit because it's ultimately the semicolons that differentiate between them.</p> Both of these statements are valid.<pre><code>default:DisplayParticleEffect(par(\"Block\",{\"Amount\" = 10, \"Material\" = \"diamond_block\"}));\ndefault:DisplayParticleEffect(\n    par(\n        \"Block\",\n        {\n            \"Amount\" = 10, \n            \"Material\" = \"diamond_block\"\n        }\n    )\n);\n</code></pre> <p>Anything that involves sectioning off chunks of code (like if statements or loops) does so with curly braces. Example<pre><code>if (default?HasPlotPermission{\"Permission\" = \"Owner\"}) {\n    default:SendMessage(\"You are the owner!\");\n}\n</code></pre> Example<pre><code>while (default.AttackCooldownTicks &gt; 0) {\n    default:GivePotionEffect(pot(\"Slowness\"));\n    wait;\n}\ndefault:ClearPotionEffects;\n</code></pre></p>"},{"location":"getting_started/language_overview/#expressions","title":"Expressions","text":"<p>Nearly every place in Terracotta that accepts a value accepts an expression. This means equations and even other action calls can be inlined, avoiding the need to use temporary variables.</p> <p>Example<pre><code>FUNCTION coloredParticleTrail;\nPARAM hue: num;\n\ndefault:DisplayParticleEffect(\n    par(\n        var:SetToRandom(\"Entity Effect\",\"Dust\"),\n        {\n            \"Amount\" = num:Random(1,5),\n            \"Color\" = var:SetToHSBColor(line hue,100,100)\n        }\n    ),\n    loc:ShiftAllAxes(default.Location,0,0.1,0)\n);\n</code></pre> More detailed information on Expressions can be found here.</p>"},{"location":"getting_started/language_overview/#comments","title":"Comments","text":"<p>Single-line comments are created using <code>#</code>. There is currently no syntax for multi-line comments other than using multiple single-line comments. <pre><code># Sends a message to the player\n# TODO: Add color codes\ndefault:SendMessage(\"Hello world!\"); # End-of-line comment\n\n# Code can be commented out to disable it:\n#default:PlaySound(snd(\"Pling\"));\n</code></pre></p>"},{"location":"getting_started/language_overview/#_1","title":"Language Overview","text":"<p>Next: Read more on Expressions, learn about Item Libraries, see how Actions and Variables work, or just start messing around and reference these docs as needed!</p>"},{"location":"getting_started/plot_setup/","title":"Plot Setup","text":"<p>If you haven't already installed the VSCode extension and CodeClient, see Installation.</p> <p>Don't delete your code!</p> <p>Always make sure to start with an empty plot. Never run Terracotta on plots made using normal DiamondFire coding because there is no way to recover code Terracotta may overwrite.</p>"},{"location":"getting_started/plot_setup/#creating-a-project","title":"Creating a Project","text":"<ol> <li>Choose a plot on DiamondFire to compile to and join it.</li> <li>Create a folder to hold all your plot's code and open it in VSCode. </li> <li>From the Run and Debug menu, click <code>create a launch.json file</code> and select <code>Terracotta</code> from the list of langauges.  </li> <li>In the newly created <code>launch.json</code> file, make sure to set <code>plotSize</code> appropriately for the plot you will be compiling to. </li> </ol> Plot Type Plot Size Basic <code>50</code> Large <code>100</code> Massive <code>300</code> Mega <code>300</code> All <code>launch.json</code> parameter explanations <ul> <li><code>folder</code>: The folder to compile. Pretty self-explanatory.</li> <li><code>exportMode</code>: Can be either <code>\"sendToCodeClient\"</code> or <code>\"saveToFiles\"</code>.<ul> <li><code>\"sendToCodeClient\"</code>: When running, automatically place compiled templates via CodeClient.</li> <li><code>\"saveToFiles\"</code>: (CURRENTLY UNIMPLEMENTED!) When running, save all compiled templates to files.</li> </ul> </li> <li><code>autoSwitchToDev</code>: If in play or build mode upon compiling, automatically enter dev mode. If left disabled, trying to compile while in build or play mode will fail. Only applies if <code>exportMode</code> is <code>\"sendToCodeClient\"</code>.</li> <li><code>autoSwitchToPlay</code>: Automatically enter play mode after all compiled templates have been placed.</li> <li><code>plotSize</code>: Used by the codeline splitter to know what length templates should be limited to. If you want to \"disable\" the codeline splitter, just set this to a very high number.</li> </ul>"},{"location":"getting_started/plot_setup/#compiling-a-project","title":"Compiling a Project","text":"<p>Terracotta script files have the extension <code>.tc</code>. Create a script in your project folder to test with:</p> test.tc<pre><code>PLAYER_EVENT Join;\n\ndefault:SendMessage(\"Hello world!\");\n</code></pre> <p>In your Minecraft client, run the command <code>/auth</code>. This gives Terracotta permission to manipulate your plot using CodeClient. You will have to repeat this every time you restart either Minecraft or VSCode.</p> <p>When you can see <code>CC Conected</code> in the bottom right of VSCode, press <code>f5</code> or click the green play symbol at the top of Run and Debug to compile your plot.</p> <p>Warning</p> <p>Sometimes CodeClient will give up while trying to place code. If this happens, run <code>/abort</code> in your Minecraft client and try recompiling.</p> <p>If you find yourself getting stuck in a plot border, run <code>/worldplot &lt;your plot size&gt;</code>.</p> <p>Next: Get an overview of how Terracotta works</p>"},{"location":"language_features/expressions/","title":"Expressions","text":"<p>For uses of the Set Variable block not covered by the operators listed below, see Set Variable.</p> <p>You can write an expression almost anywhere you can put a value.</p> Examples<pre><code>line reward = num:Round(game.PlayerCount * global coinBonus * (global (\"%default killstreak\") + 10));\n\ndefault:Teleport(default.Location + (default.Direction * global (\"%default teleportRange\")));\n\ndefault:GivePotionEffect(pot(\"Speed\", 1, (10*20) + num:Random(0,global maxPotionBonus)));\n</code></pre>"},{"location":"language_features/expressions/#value-operators","title":"Value Operators","text":"<p>Info</p> <p>Many operators work on more types of code items than just numbers. For more info on which operators work with which code items, check out the code items' respective pages under the Code Items category.</p> <p>Terracotta supports the following operators:</p> <ul> <li><code>+</code> - Addition</li> <li><code>-</code> - Subtraction</li> <li><code>*</code> - Multiplication</li> <li><code>/</code> - Division</li> <li><code>^</code> - Exponentiation</li> <li><code>%</code> - Modulo</li> </ul> <p>Operations between constants are evaluated at compile-time, meaning you can use them safely for convenience without having to worry about using CPU. In the below example, <code>5 * 20</code> is directly added to the template as the number <code>100</code> and never creates any codeblocks. This applies to all code items, not just numbers.</p> <pre><code>wait(5 * 20){\"Time Unit\" = \"Ticks\"};\n</code></pre>"},{"location":"language_features/expressions/#inlined-functions","title":"Inlined Functions","text":"<p>Any function that returns a value can be used in expressions. Some actions like Set Location Coordinate still return a value even if their description doesn't say so. Generally, if an action has <code>Variable - Variable to set</code> as its first parameter, it can be inlined.</p> Examples<pre><code>default:SendMessage(\"You rolled a \" + num:Random(1,6) + \"!\");\n\ndefault:GiveItems(item(var:SetToRandom(\"cooked_porkchop\",\"cooked_beef\",\"golden_carrot\"),16));\n</code></pre> <p>Custom function calls can be inlined as long as the function being called specifies a return value. <pre><code>FUNCTION getCoinAmount;\nRETURNS num;\n\nreturn num:Random(5,10);\n</code></pre> <pre><code>PLAYER_EVENT KillPlayer;\n\nglobal (\"%uuid coins\") += call getCoinAmount() * global (\"%uuid coinMultiplier\");\n</code></pre></p>"},{"location":"language_features/expressions/#incrementors","title":"Incrementors","text":"<p>Incrementors do an operation to a variable without having to write out <code>variablename = variablename &lt;operation&gt; &lt;value&gt;</code>.</p> Incremetors<pre><code>global added      += 10;\nglobal subtracted -= 2389;\nglobal multiplied *= 100;\nglobal divided    /= 10;\nglobal exponented ^= 3;\nglobal moduloed   %= 2;\n</code></pre>"},{"location":"language_features/expressions/#type-overrides","title":"Type Overrides","text":"<p>Terracotta has some type inference built in, so for many situations (especially variables that are declared inside the file you're working in) you won't have to worry about types. Sometimes though, the type of a value is unknown and must be specified manually in order to use it with operations. This can be done by adding <code>: &lt;type&gt;</code> after the value.</p> <p>In the below case, <code>spawnLocation</code>'s type is unknown. For the compiler to know what to do when adding the vector to it, you have to manually specify that it's a location. <pre><code>default:Teleport(global spawnLocation: loc + vec(1,10,1));\n</code></pre></p> <p>Specifying the type of a variable every time you use it would suck, so you can also assign a type to variables outside of expressions. <pre><code>global spawnLocation: loc;\n\n# compiler now knows for both of these lines that `spawnLocation` is a location\ndefault:Teleport(global spawnLocation + vec(0,10,0));\nwait(1){\"Time Unit\" = \"Seconds\"};\ndefault:Teleport(global spawnLocation + vec(0,20,0));\n</code></pre></p> <p>Type overrides can also be applied to indexing operations and actions/functions that return multiple types.</p> <pre><code>default:Teleport(global spawnLocationDict[\"main\"]: loc + vec(0,10,0));\n\nline newTag = item:GetTag(global item,\"cooltagname\"): num + 10;\n</code></pre>"},{"location":"language_features/expressions/#indexing-operation","title":"Indexing Operation","text":"<p>Values in lists and dicts can be accessed via square bracket syntax from within expressions.</p> <pre><code>line dict = {\n    \"very awesome key\" = \"even more awesome value\"\n};\ndefault:SendMessage(line dict[\"very awesome key\"]);\n\nline list = [1,2,\"buckle my shoe\"];\ndefault:SendMessage(line list[3]);\n</code></pre> <p>Warning</p> <p>Even though you can easily do the same index operation in multiple places, it's not recommended. Every index operation creates more codeblocks, which uses more CPU. For this reason, if you know a value is not going to change, it's best to only index once and store the result in a variable.</p> Bad<pre><code>global locations = {\n    \"spawn\" = loc(10,50,10)\n};\n\ndefault:SendMessage(\"Teleporting to location\", global locations[\"spawn\"]);\ndefault:Teleport(global locations[\"spawn\"]);\n</code></pre> Good<pre><code>global locations = {\n    \"spawn\" = loc(10,50,10)\n};\n\nline selectedLocation = global locations[\"spawn\"];\n\ndefault:SendMessage(\"Teleporting to location\", line selectedLocation);\ndefault:Teleport(line selectedLocation);\n</code></pre> <p>It's true that the above example is a bit unnecessary, but in loops or when using indexing operations that traverse multiple levels the saved CPU can really add up.</p> <p>Indexes can themselves be expressions. <pre><code>line scores = [23,925,78,873];\ndefault:SendMessage(line teamScores[num:Random(1,4)]);\n\nline teams = {\n    \"red\" = {\n        \"points\" = 12\n    },\n    \"blue\" = {\n        \"points\" = 15\n    }\n};\nline teamData = line teams[var:SetToRandom(\"red\",\"blue\")];\n</code></pre></p> <p>If the type of a value is unknown, it must be manually specified in order to index into it. The indexing operation can appear directly after the type override; no extra parentheses are needed. <pre><code>default:SendMessage(global dict_declared_elsewhere:dict[\"cool_key\"]);\ndefault:SendMessage(global list_declared_elsewhere:list[5]);\n</code></pre></p> <p>Multiple levels can be traversed, however you will have to manually specify the type of each level. <pre><code>line gameState = {\n    \"redTeam\" = {\n        \"unlocks\" = [\"damageBoost\",\"healthBoost\"]\n    }\n};\n\nline firstUnlock = line gameState[\"redTeam\"]:dict[\"unlocks\"]:list[1];\n</code></pre></p> <p>You can set dictionary values by indexing into them and using an assignment operator.</p> <pre><code>global dict = {};\nglobal dict[\"key\"] = 100;\n\ndefault:SendMessage(global dict[\"key\"]); #sends \"100\"\n</code></pre> <p>Assigning values to keys multiple levels deep will change the value in the original dictionary. <pre><code>global dict = {\n    \"words\" = [\"random value\"]\n};\nglobal dict[\"words\"]:list[0] = \"jeremaster\";\n\ndefault:SendMessage(global dict[\"words\"][0]); #sends \"jeremaster\"\n</code></pre></p>"},{"location":"language_features/expressions/#conditional-expressions","title":"Conditional Expressions","text":"<p>Conditions can take the form of either an expression with a comparison operator or an IF PLAYER/ENTITY/GAME/VARIABLE action. </p> <p>The following are both valid ways to check which item a player is holding: <pre><code>if (default?IsHoldingItem(item(\"emerald\")){\"Hand Slot\" = \"Main hand\"}) {\n    default:SendMessage(\"Accepted!\");\n}\n\nif (default.MainHandItem == item(\"emerald\")) {\n    default:SendMessage(\"Accepted!\");\n}\n</code></pre></p> <p>As of now, there are no logic operators, meaning there is no way to combine multiple conditions. This will likely change in the future.</p>"},{"location":"language_features/expressions/#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators compare their left expression and right expression. The following comparison operators are available:</p> <ul> <li><code>==</code></li> <li><code>!=</code></li> <li><code>&lt;</code></li> <li><code>&gt;</code></li> <li><code>&lt;=</code></li> <li><code>&gt;=</code></li> </ul> <p><code>==</code> and <code>!=</code> work with any types of values. <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, and <code>&gt;=</code> only work with numbers.</p> <p>Example<pre><code>if (default.Y + 2 &gt; 100) {\n    # code...\n};\n</code></pre> Example<pre><code>select PlayersByCondition saved (\"powerup %uuid\") == \"extraHealth\";\n</code></pre></p>"},{"location":"language_features/expressions/#condition-actions","title":"Condition Actions","text":"<p>Condition actions syntax is identical to normal action syntax except it uses <code>?</code> instead of <code>:</code>. <pre><code>target?Action(arguments){tags}\n</code></pre></p> <p>Example<pre><code>if (game?CommandEquals(\"spawn\")) {\n    default:Teleport(loc(5,50,5));\n}\n</code></pre> Example<pre><code>select PlayersByCondition list?Contains(saved (\"powerups %uuid\"), \"speedBoost\"));\n</code></pre></p>"},{"location":"language_features/expressions/#generic-targets","title":"Generic Targets","text":"<p>Due to DiamondFire limitations, condition actions used outside of IF blocks (e.g. in repeats or select actions) cannot differentiate between targets. To access IF PLAYER and IF ENTITY conditions in these contexts, the generic targets <code>player</code> and <code>entity</code> must be used.</p> <p>Example<pre><code>while (player?IsSneaking) {\n    # code...\n}\n</code></pre> Example<pre><code>select EntitiesByCondition entity?IsNearLocation(default.Location,5);\n</code></pre></p>"},{"location":"language_features/expressions/#not","title":"Not (<code>!</code>)","text":"<p>Condition actions can be inverted by prefixing them with a <code>!</code>. This is equivalent to clicking their codeblock with the NOT Arrow. Example<pre><code>if (!default?HasPlotPermission{\"Permission\" = \"Developer\"}) {\n    default:SendMessage(\"&amp;cYou do not have permission to use this command!\");\n    return;\n}\n</code></pre> Example<pre><code>select EntitiesByCondition !entity?HasTag(\"owner\",\"%default\");\n</code></pre></p>"},{"location":"language_features/expressions/#order-of-operations","title":"Order of Operations","text":"<p>Unlike a certain expression system used by DiamondFire that shall not be named, Terracotta expressions follow a sane order of operations.</p> <p>Things closer to the top of this list are evaluated before things closer to the bottom. Things on the same line of this list are evaluated from left to right.</p> <ul> <li>Nested expressions (parentheses), indexing into dicts/lists, and function calls (actions, constructors)</li> <li>Exponentiation (<code>^</code>)</li> <li>Multiplication, division, and modulo (<code>*</code>, <code>/</code>, <code>%</code>)</li> <li>Addition and subtraction (<code>+</code>, <code>-</code>)</li> <li>Comparisons (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>)</li> </ul>"}]}